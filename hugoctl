#!/usr/bin/env bash

function usage() {
cat<<EOF
Usage: $0 <command>

Commands:
    install         Pulls project and installs dependencies
    build           Build into specified directory, accepts project path as arg
    dev             Serve project locally, accepts project path as arg
    deploy          Deploys project to live environment, accepts deploy path as arg
    cleanup         Delete all temporary files
EOF
exit 0
}

function install() {
    echo "Installing hugo/iamschulz"
    git pull --recurse-submodule
    yarn install
    yarn --cwd themes/iamschulz-hugo-theme install 
}

function purgeCache() {
    echo "Purging Cloudflare Cache"
    urls='{"files":["'https://iamschulz.com','`hugo list all | egrep -o 'https?://[^ ,]+' | sed ':a;N;$!ba;s/\n/","/g'`'"]}'
    curl -X POST "https://api.cloudflare.com/client/v4/zones/5c2be641b5bc5530a92693d2504d2f91/purge_cache" \
        -H "Authorization: Bearer oG1sVL68INjo5muWwGkndL_7yx1J-5zU6ch1mSpH" \
        -H "Content-Type: application/json" \
        --data $urls
}

function build() {
    local targetDir=$1
    if [[ "$targetDir" == "" ]]; then
        targetDir="public"
    fi

    yarn --cwd themes/iamschulz-hugo-theme build
    hugo -d $targetDir --cacheDir $HOME/tmp
    node convert-images.js dir="./$targetDir"
}

function buildClean() {
    local targetDir=$1
    if [[ "$targetDir" == "" ]]; then
        targetDir="public"
    fi

    yarn --cwd themes/iamschulz-hugo-theme build
    hugo -d $targetDir --cacheDir $HOME/tmp --cleanDestinationDir
    node convert-images.js dir="./$targetDir"
}

function dev() {
    local targetDir=$1
    if [[ "$targetDir" == "" ]]; then
        targetDir="public"
    fi

    yarn --cwd themes/iamschulz-hugo-theme watch &

    node convert-images.js dir="./$targetDir"
    hugo server -d $targetDir
}

function cleanup() {
    rm -rf public
    rm -rf resources
    rm -rf node_modules
    rm -rf themes/iamschulz-hugo-theme/node_modules
    rm -rf $HOME/tmp/iamschulz-hugo
    echo "cleanup done"
}

function deploy() {
    local targetDir=$1
    if [[ "$targetDir" == "" ]]; then
        targetDir="../html/next/"
    fi

    install
    build public
    ./updatePushHeaders.sh
    echo "Syncing files to prod directory"
    rsync -rc public/ $targetDir
    echo "Syncing done"
    purgeCache
    echo "Finished deployment"
}




### Commands ###

subcommand=$1;

if [ -z "$subcommand" ]; then
    usage
fi

shift
case "$subcommand" in
    install)
        install;;
    build)
        build $@;;
    dev)
        dev $@;;
    cleanup)
        cleanup;;
    deploy)
        deploy $@;;
    purge)
        purgeCache;;
    *)
        usage;;
esac
